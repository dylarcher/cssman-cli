// tests/formatters/cssFormatter.test.js
const { describe, it } = require('node:test');
const assert = require('node:assert');
const { formatCssValue, formatTokensToCss } = require('../../src/formatters/cssFormatter');
const InternalToken = require('../../src/core/InternalToken');

describe('cssFormatter', () => {
    describe('formatCssValue', () => {
        it('should format colors from object to hex/rgba', () => {
            assert.strictEqual(formatCssValue({ r: 255, g: 0, b: 0, a: 1 }, 'color'), '#ff0000');
            assert.strictEqual(formatCssValue({ r: 0, g: 255, b: 0, a: 0.5 }, 'color'), 'rgba(0, 255, 0, 0.5)');
        });
        it('should keep color strings as is', () => {
            assert.strictEqual(formatCssValue('#ABC', 'color'), '#ABC');
            assert.strictEqual(formatCssValue('blue', 'color'), 'blue');
        });
        it('should return strings as is (for custom props)', () => {
            assert.strictEqual(formatCssValue('hello world', 'string'), 'hello world');
            assert.strictEqual(formatCssValue('"already quoted"', 'string'), '"already quoted"');
        });
        it('should return numbers and dimensions as strings', () => {
            assert.strictEqual(formatCssValue(16, 'number'), '16');
            assert.strictEqual(formatCssValue('16px', 'dimension'), '16px');
        });
    });

    describe('formatTokensToCss', () => {
        const tokens = [
            new InternalToken('color-primary', ['color', 'primary'], '#ff0000', 'color', 'Primary color', { source: 'test' }),
            new InternalToken('size-font-large', ['size', 'font', 'large'], '24px', 'dimension', 'Large font size', { source: 'test' }),
            new InternalToken('font-family-heading', ['font', 'family', 'heading'], 'Arial Black', 'string', 'Heading font', { source: 'test' }),
        ];

        it('should generate CSS custom properties with default :root selector', () => {
            const expectedCss = `// Generated by Tokman CLI - CSS Custom Properties

:root {
  /* Primary color */
  --color-primary: #ff0000;
  /* Large font size */
  --size-font-large: 24px;
  /* Heading font */
  --font-family-heading: Arial Black;
}
`;
            assert.strictEqual(formatTokensToCss(tokens), expectedCss);
        });

        it('should generate CSS custom properties with a custom selector', () => {
            const options = { selector: '.my-theme' };
            const expectedCss = `// Generated by Tokman CLI - CSS Custom Properties

.my-theme {
  /* Primary color */
  --color-primary: #ff0000;
  /* Large font size */
  --size-font-large: 24px;
  /* Heading font */
  --font-family-heading: Arial Black;
}
`;
            assert.strictEqual(formatTokensToCss(tokens, options), expectedCss);
        });

        it('should handle an empty token array', () => {
             const expectedCss = `// Generated by Tokman CLI - CSS Custom Properties

:root {
}
`;
            assert.strictEqual(formatTokensToCss([]), expectedCss);
        });
    });
});
