// tests/formatters/scssFormatter.test.js
const { formatScssValue, formatTokensToScss } = require('../../src/formatters/scssFormatter');
const InternalToken = require('../../src/core/InternalToken');

describe('scssFormatter', () => {
    describe('formatScssValue', () => {
        it('should format colors from object to hex/rgba', () => {
            expect(formatScssValue({ r: 255, g: 0, b: 0, a: 1 }, 'color')).toBe('#ff0000');
            expect(formatScssValue({ r: 0, g: 255, b: 0, a: 0.5 }, 'color')).toBe('rgba(0, 255, 0, 0.5)');
        });
        it('should keep color strings as is', () => {
            expect(formatScssValue('#ABC', 'color')).toBe('#ABC');
            expect(formatScssValue('blue', 'color')).toBe('blue');
        });
        it('should quote strings', () => {
            expect(formatScssValue('hello world', 'string')).toBe("'hello world'");
            expect(formatScssValue("it's quoted", 'string')).toBe("'it\\'s quoted'");
        });
        it('should return numbers and dimensions as strings', () => {
            expect(formatScssValue(16, 'number')).toBe('16');
            expect(formatScssValue('16px', 'dimension')).toBe('16px');
        });
    });

    describe('formatTokensToScss', () => {
        const tokens = [
            new InternalToken('color-primary', ['color', 'primary'], '#ff0000', 'color', 'Primary color', { source: 'test' }),
            new InternalToken('size-font-large', ['size', 'font', 'large'], '24px', 'dimension', 'Large font size', { source: 'test' }),
            new InternalToken('font-family-heading', ['font', 'family', 'heading'], '"Arial Black"', 'string', 'Heading font', { source: 'test' }),
        ];

        it('should generate individual SCSS variables', () => {
            const expectedScss = `// Generated by Tokman CLI - SCSS Variables

// Primary color
\$color-primary: #ff0000;

// Large font size
\$size-font-large: 24px;

// Heading font
\$font-family-heading: '"Arial Black"';

`;
            expect(formatTokensToScss(tokens)).toBe(expectedScss);
        });

        it('should generate an SCSS map when generateMap is true', () => {
            const options = { generateMap: true, mapName: 'my-tokens' };
            const expectedScss = `// Generated by Tokman CLI - SCSS Variables

\$my-tokens: (
  'color': (
    'primary': #ff0000
  ),
  'size': (
    'font': (
      'large': 24px
    )
  ),
  'font': (
    'family': (
      'heading': '"Arial Black"'
    )
  )
);
`;
            expect(formatTokensToScss(tokens, options)).toBe(expectedScss);
        });
    });
});
